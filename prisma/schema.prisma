// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model Product{
  id                     String                 @id @default(uuid())
  name                   String
  price                  Int
  quantity               Int
  tax                    Int
  imagePath              String                 @unique
  description            String                 
  category               String
  isAvailableForPurchase Boolean                @default(true)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  orders                 Order[]
}

model Address{
    id               Int   @id @default(autoincrement())
    name            String
    address1         String
    address2         String?
    phonenumber      BigInt?
    pincode          Int?
    userid           String
    user            User    @relation(fields: [userid], references: [id], onDelete: Cascade) 
    order             Order[]

}
model Order {
  id               String   @id @default(uuid())
  price            Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  quantity          String
  userId            String 
  
  approveOrder      Boolean
  addressid         Int 
  address           Address    @relation(fields: [addressid], references: [id]) 
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade) 
  product   Product []
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  role          String?
  image         String?
  order         Order[]
  cart          String?
  val           String?
  quantity      Int?
  total         Float?
  accounts      Account[]
  sessions      Session[]
  address       Address[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}